import { Provider, Typed } from 'ethers';
import { Address } from '../types/Address';
import { EvmChainData } from '../types/EvmChainData';
type NameData = {
    name: string;
    expiry: number;
    frozen: boolean;
};
export type UserNft = NameData & {
    id: bigint;
    url: string;
};
type ScData = {
    name: string;
    owner: Address;
    tldNode: string;
    symbol: string;
    baseUrl: string;
    gracePeriod: number;
    tldFrozen: boolean;
    defaultTTL: number;
};
declare function getNameData(params: {
    name: string;
    config: EvmChainData;
    provider: Provider;
    registrarAddress: Address | undefined;
}): Promise<NameData>;
declare function getScData(params: {
    config: EvmChainData;
    provider: Provider;
    registrarAddress: Address | undefined;
}): Promise<ScData>;
declare function getUsersNfts(params: {
    config: EvmChainData;
    provider: Provider;
    registrarAddress: Address | undefined;
    userAddress: Address | undefined;
}): Promise<UserNft[]>;
declare function getUserNftData(params: {
    config: EvmChainData;
    provider: Provider;
    registrarAddress: Address | undefined;
    domain: string;
}): Promise<{
    name: string;
    expiry: bigint;
    frozen: boolean;
    id: Typed;
    url: string;
}>;
declare function getMainDomainRaw(params: {
    provider: Provider;
    address: Address;
    rootAddress: Address;
}): Promise<string | null>;
export declare const registrarFetchers: {
    getNameData: typeof getNameData;
    getScData: typeof getScData;
    getUsersNfts: typeof getUsersNfts;
    getUserNftData: typeof getUserNftData;
    getMainDomainRaw: typeof getMainDomainRaw;
};
export {};
//# sourceMappingURL=registrar.fetchers.d.ts.map