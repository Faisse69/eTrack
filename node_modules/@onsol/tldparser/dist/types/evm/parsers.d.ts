import { Connection, PublicKey } from '@solana/web3.js';
import { JsonRpcProvider } from 'ethers';
import { ITldParser } from '../parsers.interface';
import { MainDomain, NameAccountAndDomain, NameRecordHeader } from '../svm';
import { AddressAndDomain } from './types/AddressAndDomain';
import { NetworkWithRpc } from './utils';
import { NameRecord } from './types/NameRecordHeader';
export declare class TldParserEvm implements ITldParser {
    connection: JsonRpcProvider;
    private config;
    constructor(settings?: Connection | NetworkWithRpc);
    getAllUserDomains(userAccount: string): Promise<NameRecord[]>;
    getAllUserDomainsFromTld(userAccount: string, tld: string): Promise<PublicKey[] | NameRecord[]>;
    getOwnerFromDomainTld(domainTld: string): Promise<PublicKey | undefined | string>;
    getNameRecordFromDomainTld(domainTld: string): Promise<NameRecordHeader | NameRecord | undefined>;
    getTldFromParentAccount(parentAccount: PublicKey | string): Promise<string>;
    reverseLookupNameAccount(nameAccount: PublicKey | string, parentAccountOwner: PublicKey | string): Promise<string>;
    getMainDomain(userAddress: PublicKey | string): Promise<MainDomain | NameRecord>;
    getParsedAllUserDomainsFromTldUnwrapped(userAccount: PublicKey | string, tld: string): Promise<NameAccountAndDomain[]>;
    getParsedAllUserDomainsFromTld(userAccount: PublicKey | string, tld: string): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;
    getParsedAllUserDomainsUnwrapped(userAccount: PublicKey | string): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;
    getParsedAllUserDomains(userAccount: PublicKey | string): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;
    private getUserNftFromTld;
    private getBaseRegistry;
    private getTldFromFullDomain;
}
//# sourceMappingURL=parsers.d.ts.map