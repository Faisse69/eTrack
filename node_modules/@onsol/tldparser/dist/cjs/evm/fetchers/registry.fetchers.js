'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registryFetchers = void 0;
const ethers_1 = require("ethers");
function getDomainOwner(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { node, config, provider, registryAddress } = params;
        if (!provider)
            throw Error('No provider');
        if (!config)
            throw Error('Not connected to SmartContract');
        if (!registryAddress)
            throw Error('No registrar address');
        const contract = new ethers_1.Contract(registryAddress, ['function owner(bytes32) view returns (address)'], provider);
        const owner = yield contract.owner(node);
        return owner;
    });
}
function getRecordData(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { node, config, provider, registryAddress } = params;
        if (!provider)
            throw Error('No provider');
        if (!config)
            throw Error('Not connected to SmartContract');
        if (!registryAddress)
            throw Error('No registrar address');
        const contract = new ethers_1.Contract(registryAddress, [
            'function owner(bytes32) view returns (address)',
            'function resolver(bytes32) view returns (address)',
            'function ttl(bytes32) view returns (uint256)',
        ], provider);
        const owner = yield contract.owner(node);
        const resolver = yield contract.resolver(node);
        const ttl = yield contract.ttl(node);
        return {
            owner,
            resolver,
            ttl: BigInt(ttl.toString()),
        };
    });
}
exports.registryFetchers = {
    getDomainOwner,
    getRecordData,
};
//# sourceMappingURL=registry.fetchers.js.map