{"version":3,"file":"parsers.js","sourceRoot":"","sources":["../../src/parsers.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,2CAA6C;AAK7C,2CAA6C;AAK7C;;;;;;;;GAQG;AACH,MAAa,SAAS;IAGlB,YACI,UAAuC,EACvC,KAAc;QAEd,IAAI,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE;YAC1B,OAAO,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACpD;IACL,CAAC;IAEO,MAAM,CAAC,YAAY,CACvB,UAAuC,EACvC,KAAc;QAEd,QAAQ,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,EAAE,EAAE;YAC1B,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS;gBACV,OAAO,IAAI,sBAAY,CAAC,UAAwB,CAAC,CAAC;YACtD,KAAK,OAAO;gBACR,OAAO,IAAI,sBAAY,CAAC,UAA4B,CAAC,CAAC;YAC1D;gBACI,MAAM,IAAI,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;SAChE;IACL,CAAC;IAED;;;;OAIG;IACG,iBAAiB,CACnB,WAA+B;;YAE/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;OAKG;IACG,wBAAwB,CAC1B,WAA+B,EAC/B,GAAW;;YAEX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;OAIG;IACG,qBAAqB,CACvB,SAAiB;;YAEjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;OAIG;IACG,0BAA0B,CAC5B,SAAiB;;YAEjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;OAIG;IACG,uBAAuB,CACzB,aAAiC;;YAEjC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;OAKG;IACG,wBAAwB,CAC1B,WAA+B,EAC/B,kBAAsC;;YAEtC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;OAIG;IACG,aAAa,CACf,WAA+B;;YAE/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;;OAMG;IACG,uCAAuC,CACzC,WAA+B,EAC/B,GAAW;;YAEX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;;OAMG;IACG,8BAA8B,CAChC,WAA+B,EAC/B,GAAW;;YAEX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;OAKG;IACG,gCAAgC,CAClC,WAA+B;;YAE/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;;;OAKG;IACG,uBAAuB,CACzB,WAA+B;;YAE/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;KAAA;CACJ;AAlKD,8BAkKC","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { JsonRpcApiProvider } from 'ethers';\nimport { TldParserEvm } from './evm/parsers';\nimport { AddressAndDomain } from './evm/types/AddressAndDomain';\nimport { NetworkWithRpc } from './evm/utils';\nimport { ITldParser } from './parsers.interface';\nimport { NameAccountAndDomain } from './svm/name-record-handler';\nimport { TldParserSvm } from './svm/parsers';\nimport { MainDomain } from './svm/state/main-domain';\nimport { NameRecordHeader } from './svm/state/name-record-header';\nimport { NameRecord } from 'evm';\n\n/**\n * TldParser class\n *\n * This class has been improved to maintain compatibility with previous versions.\n * The methods present in this class are provided for backwards compatibility\n * and to facilitate easy migration to v1 in future builds.\n *\n * The TldParser for multiple chains will be implemented, and Solana integration will remain unchanged without any breaking modifications.\n */\nexport class TldParser implements ITldParser {\n    connection: Connection | JsonRpcApiProvider;\n\n    constructor(\n        connection: Connection | NetworkWithRpc,\n        chain?: string,\n    ) {\n        if (new.target === TldParser) {\n            return TldParser.createParser(connection, chain);\n        }\n    }\n\n    private static createParser(\n        connection: Connection | NetworkWithRpc,\n        chain?: string,\n    ): ITldParser {\n        switch (chain?.toLowerCase()) {\n            case 'yona':\n            case 'eclipse':\n            case 'termina':\n            case 'solana':\n            case undefined:\n                return new TldParserSvm(connection as Connection);\n            case 'monad':\n                return new TldParserEvm(connection as NetworkWithRpc);\n            default:\n                throw new Error(`Unsupported TldParser chain: ${chain}`);\n        }\n    }\n\n    /**\n     * retrieves all nameAccounts for any user.\n     *\n     * @param userAccount user publickey or string\n     */\n    async getAllUserDomains(\n        userAccount: PublicKey | string,\n    ): Promise<PublicKey[] | NameRecord[]> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves all nameaccounts for any user in a specific tld.\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    async getAllUserDomainsFromTld(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<PublicKey[] | NameRecord[]> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves owner of a specific Name Account from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    async getOwnerFromDomainTld(\n        domainTld: string,\n    ): Promise<PublicKey | undefined | string> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves domainTld data a domain from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    async getNameRecordFromDomainTld(\n        domainTld: string,\n    ): Promise<NameRecordHeader | NameRecord | undefined> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves tld from parent name via TldHouse account.\n     *\n     * @param parentAccount parent publickey or string\n     */\n    async getTldFromParentAccount(\n        parentAccount: PublicKey | string,\n    ): Promise<string> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves domain from name account via tldParent account.\n     *\n     * @param nameAccount name publickey or string\n     * @param parentAccountOwner parent Owner or string (TldHouse)\n     */\n    async reverseLookupNameAccount(\n        nameAccount: PublicKey | string,\n        parentAccountOwner: PublicKey | string,\n    ): Promise<string> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves main domain name account and its domain tld from user address.\n     *\n     * @param userAddress user publickey or string\n     */\n    async getMainDomain(\n        userAddress: PublicKey | string,\n    ): Promise<MainDomain | NameRecord> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves all parsed domains as strings with name accounts in an array for user in a specific TLD.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    async getParsedAllUserDomainsFromTldUnwrapped(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves all parsed domains and name accounts including NFTs in an array for any user in a specific TLD.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    async getParsedAllUserDomainsFromTld(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves all parsed domains and name accounts for user.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     */\n    async getParsedAllUserDomainsUnwrapped(\n        userAccount: PublicKey | string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]> {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * retrieves all parsed domains and name accounts including NFTs for user.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     */\n    async getParsedAllUserDomains(\n        userAccount: PublicKey | string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]> {\n        throw new Error('Method not implemented.');\n    }\n}\n"]}