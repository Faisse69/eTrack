{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/evm/utils.ts"],"names":[],"mappings":";;;AAAA,mCAQgB;AAChB,2CAAgD;AAGhD,MAAa,cAAe,SAAQ,gBAAO;IAGvC,YAAY,IAAY,EAAE,OAAe,EAAE,MAAc;QACrD,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;CACJ;AAPD,wCAOC;AAED,SAAgB,SAAS,CAAgC,GAAM;IAC3D,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,CAA4B,CAAC;AACzD,CAAC;AAFD,8BAEC;AAED,SAAgB,kBAAkB,CAC9B,OAA2B;IAE3B,IAAI,OAAO,KAAK,SAAS;QAAE,OAAO,SAAS,CAAC;IAE5C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,6BAAiB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QAC7D,OAAO,SAAS,CAAC,OAAO,KAAK,OAAO,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,WAAW,OAAO,6BAA6B,CAAC,CAAC;KACpE;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAdD,gDAcC;AAED,SAAgB,kBAAkB,CAAC,KAAa;IAC5C,MAAM,SAAS,GAAG,IAAA,kBAAS,EAAC,IAAA,oBAAW,EAAC,KAAK,CAAC,CAAC,CAAC;IAChD,OAAO,SAAS,CAAC;AACrB,CAAC;AAHD,gDAGC;AAED,SAAgB,kBAAkB,CAAC,MAAc;IAC7C,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,KAAK,CAAC;AACjB,CAAC;AAHD,gDAGC;AAGD,SAAgB,WAAW,CAAC,IAAY;IACpC,IAAI,MAAM,GAAwB,iBAAQ,CAAC;IAE3C,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACjC,OAAO,KAAK,CAAC,MAAM,EAAE;QACjB,MAAM,GAAG,IAAA,kBAAS,EAAC,IAAA,eAAM,EAAC,CAAE,MAAM,EAAE,IAAA,kBAAS,EAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC;KAChF;IAED,OAAO,IAAA,gBAAO,EAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;AATD,kCASC;AAGD,SAAS,YAAY,CAAC,IAAY;IAC9B,MAAM,KAAK,GAAG,IAAA,oBAAW,EAAC,IAAA,qBAAY,EAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,MAAM,KAAK,GAAsB,EAAG,CAAC;IAErC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO,KAAK,CAAC;KAAE;IAExC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAEnB,gEAAgE;QAChE,IAAI,CAAC,KAAK,IAAI,EAAE;YACZ,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;SAChB;KACJ;IAED,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import {\n    concat,\n    ensNormalize,\n    hexlify,\n    keccak256,\n    Network,\n    toUtf8Bytes,\n    ZeroHash,\n} from 'ethers';\nimport { EVM_CHAIN_CONFIGS } from './constants';\nimport { EvmChainData } from './types/EvmChainData';\n\nexport class NetworkWithRpc extends Network {\n    public rpcUrl: string;\n\n    constructor(name: string, chainId: number, rpcUrl: string) {\n        super(name, chainId);\n        this.rpcUrl = rpcUrl;\n    }\n}\n\nexport function getValues<T extends Record<string, any>>(obj: T): [T[keyof T]] {\n    return Object.values(obj) as [(typeof obj)[keyof T]];\n}\n\nexport function configOfEvmChainId(\n    chainId: number | undefined,\n): EvmChainData | undefined {\n    if (chainId === undefined) return undefined;\n\n    const config = Object.values(EVM_CHAIN_CONFIGS).find(chainData => {\n        return chainData.chainId === chainId;\n    });\n\n    if (config === undefined) {\n        throw new Error(`ChainId ${chainId} is not currently supported`);\n    }\n\n    return config;\n}\n\nexport function labelhashFromLabel(label: string): string {\n    const labelhash = keccak256(toUtf8Bytes(label));\n    return labelhash;\n}\n\nexport function namehashFromDomain(domain: string): string {\n    const label = ansNamehash(domain);\n    return label;\n}\n\n\nexport function ansNamehash(name: string): string {\n    let result: string | Uint8Array = ZeroHash;\n\n    const comps = ansNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([ result, keccak256(<Uint8Array>(comps.pop()))] ));\n    }\n\n    return hexlify(result);\n}\n\n\nfunction ansNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component including the dot\n        if (d === 0x2e) {\n            comps.push(bytes.slice(last, i));\n            last = i + 1;\n        }\n    }\n\n    comps.push(bytes.slice(last - 1));\n    return comps;\n}\n"]}