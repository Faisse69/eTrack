{"version":3,"file":"parsers.interface.js","sourceRoot":"","sources":["../../src/parsers.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { JsonRpcApiProvider } from 'ethers';\nimport { AddressAndDomain } from './evm/types/AddressAndDomain';\nimport { NameAccountAndDomain } from './svm/name-record-handler';\nimport { MainDomain } from './svm/state/main-domain';\nimport { NameRecordHeader } from './svm/state/name-record-header';\nimport { NameRecord } from 'evm/types/NameRecordHeader';\n\nexport interface ITldParser {\n    connection: Connection | JsonRpcApiProvider;\n    /**\n     * retrieves all nameAccounts for any user.\n     *\n     * @param userAccount user publickey or string\n     */\n    getAllUserDomains(\n        userAccount: PublicKey | string,\n    ): Promise<PublicKey[] | NameRecord[]>;\n    /**\n     * retrieves all nameaccounts for any user in a specific tld.\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    getAllUserDomainsFromTld(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<PublicKey[] | NameRecord[]>;\n\n    /**\n     * retrieves owner of a specific Name Account from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    getOwnerFromDomainTld(\n        domainTld: string,\n    ): Promise<PublicKey | undefined | string>;\n\n    /**\n     * retrieves domainTld data a domain from domain.tld.\n     *\n     * @param domainTld full string of domain and tld e.g. \"miester.poor\"\n     */\n    getNameRecordFromDomainTld(\n        domainTld: string,\n    ): Promise<NameRecordHeader | NameRecord | undefined>;\n\n    /**\n     * retrieves tld from parent name via TldHouse account.\n     *\n     * @param parentAccount parent publickey or string\n     */\n    getTldFromParentAccount(parentAccount: PublicKey | string): Promise<string>;\n\n    /**\n     * retrieves domain from name account via tldParent account.\n     *\n     * @param nameAccount name publickey or string\n     * @param parentAccountOwner parent Owner or string (TldHouse)\n     */\n    reverseLookupNameAccount(\n        nameAccount: PublicKey | string,\n        parentAccountOwner: PublicKey | string,\n    ): Promise<string>;\n\n    /**\n     * retrieves main domain name account and its domain tld from user address.\n     *\n     * @param userAddress user publickey or string\n     */\n    getMainDomain(\n        userAddress: PublicKey | string,\n    ): Promise<MainDomain | NameRecord>;\n    /**\n     * retrieves all parsed domains as strings with name accounts in an array for user in a specific TLD.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    getParsedAllUserDomainsFromTldUnwrapped(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;\n\n    /**\n     * retrieves all parsed domains and name accounts including NFTs in an array for any user in a specific TLD.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    getParsedAllUserDomainsFromTld(\n        userAccount: PublicKey | string,\n        tld: string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;\n\n    /**\n     * retrieves all parsed domains and name accounts for user.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    getParsedAllUserDomainsUnwrapped(\n        userAccount: PublicKey | string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;\n\n    /**\n     * retrieves all parsed domains and name accounts including NFTs for user.\n     * in alphabetical order\n     *\n     * @param userAccount user publickey or string\n     * @param tld tld to be retrieved from\n     */\n    getParsedAllUserDomains(\n        userAccount: PublicKey | string,\n    ): Promise<NameAccountAndDomain[] | AddressAndDomain[]>;\n}\n"]}